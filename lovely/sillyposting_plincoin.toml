[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# Add other currencies on cashout. its all going in here now
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
position = "at"
pattern = "add_round_eval_row({name = 'bottom', dollars = dollars})"
payload = """
    for _, area in ipairs(SMODS.get_card_areas('jokers')) do
        for _, _card in ipairs(area.cards) do
            local ret = _card:calculate_plincoin_bonus()
    
            -- TARGET: calc_plincoin_bonus per card
            if ret then
                i = i+1
                add_round_eval_plincoins({name='plincoins', plincoins = ret, bonus = true, name='joker'..i, pitch = pitch, card = _card})
\t\t\t\tplincoins = plincoins + ret
                pitch = pitch + 0.06
            end
        end
    end
\tfor iter = 1, #G.GAME.tags do
\t\tlocal plincoin_ret = G.GAME.tags[iter]:apply_to_run({type = 'eval_plincoin'})
\t\tif plincoin_ret then
\t   \tadd_round_eval_plincoins({plincoins = plincoin_ret.plincoins, bonus = true, name='tag'..i, pitch = pitch, condition = plincoin_ret.condition, pos = plincoin_ret.pos, tag = plincoin_ret.tag, atlas = \"hpot_SillypostingTags\"})
   \t\tpitch = pitch + 0.06
\t   \tplincoins = plincoins + plincoin_ret.plincoins
\t\tend
\tend
    for _, area in ipairs(SMODS.get_card_areas('jokers')) do
        for _, _card in ipairs(area.cards) do
            if _card.config.center.calc_crypto_bonus then
                local ret = _card.config.center:calc_crypto_bonus(_card)
        
                -- TARGET: calc_crypto_bonus per card
                if ret then
                    i = i+1
                    add_round_eval_crypto({name='cryptocurrency', cryptocurrency = ret, bonus = true, pitch = pitch, card = _card})
\t\t\t\t\tcrypto = crypto + ret
                    pitch = pitch + 0.06
                end
            end
        end
    end
    for _, area in ipairs(SMODS.get_card_areas('jokers')) do
        for _, _card in ipairs(area.cards) do
            local ret = _card:calculate_spark_point_bonus()
    
            -- TARGET: calc_spark_point_bonus per card
            if ret then
                i = i+1
                add_round_eval_spark_points({name='spark_points', spark_points = ret, bonus = true, name='joker'..i, pitch = pitch, card = _card})
\t\t\t\tspark_points = spark_points + ret
                pitch = pitch + 0.06
            end
        end
    end
    for _, area in ipairs(SMODS.get_card_areas('jokers')) do
        for _, _card in ipairs(area.cards) do
            local ret = _card:calculate_budget_bonus()
    
            -- TARGET: calc_credits_bonus per card
            if ret then
                i = i+1
                add_round_eval_credits({name='credits', credits = ret, bonus = true, name='joker'..i, pitch = pitch, card = _card})
\t\t\t\tcredits = credits + ret
                pitch = pitch + 0.06
            end
        end
    end
    if G.GAME.selected_back.name == \"b_hpot_domn\" and G.GAME.blind.boss then
        i = i+1
        add_round_eval_all_currencies({bonus = true, name='deck'..i, pitch = pitch, card = G.GAME.selected_back})
        dollars = dollars + 1
\t\tplincoins = plincoins + 1
\t\tcredits = credits + 1
\t\tspark_points = spark_points + 1
\t\tcrypto = crypto + 1
    end
    for _, area in ipairs(SMODS.get_card_areas('jokers')) do
            for _, _card in ipairs(area.cards) do
            local ret = _card:calculate_plincoin_bonus_delayed(dollars)
    
            -- TARGET: calc_plincoin_bonus_delayed per card
            if ret then
                i = i+1
                add_round_eval_plincoins({name='plincoins', plincoins = ret, bonus = true, name='joker'..i, pitch = pitch, card = _card})
\t\t\t\tplincoins = plincoins + ret
                pitch = pitch + 0.06
            end
        end
    end
\tadd_round_eval_row({name = 'bottom', dollars = dollars, plincoins = plincoins, credits = credits, crypto = crypto, spark_points = spark_points})
"""
match_indent = true
overwrite = false

# Patch add_round_eval_row to handle decks
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
position = "before"
pattern = "elseif string.find(config.name, 'joker') then"
payload = """
    elseif string.find(config.name, 'deck') then
      table.insert(left_text, {n=G.UIT.O, config={object = DynaText({string = config.card.loc_name, colours = {G.C.FILTER}, shadow = true, pop_in = 0, scale = 0.6*scale, silent = true})}})
"""
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
position = "at"
pattern = "if config.card then config.card:juice_up(0.7, 0.46) end"
payload = """
if config.card and config.card.juice_up then config.card:juice_up(0.7, 0.46) end
"""
match_indent = true
overwrite = false

[[patches]]

[patches.pattern]
target = "functions/state_events.lua"
pattern = "local dollars = 0"
position = "after"
payload = """
local plincoins = 0
local credits = 0
local crypto = 0
local spark_points = 0"""
match_indent = true
overwrite = false

[[patches]]

[patches.pattern]
target = "functions/common_events.lua"
pattern = """
{n=G.UIT.T, config={text = localize('b_cash_out')..\": \", scale = 1, colour = G.C.UI.TEXT_LIGHT, shadow = true}},
{n=G.UIT.T, config={text = localize('$')..format_ui_value(config.dollars), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true}}"""
position = "at"
payload = "unpack(payouts)"
match_indent = true
overwrite = false

[[patches]]

[patches.pattern]
target = "functions/common_events.lua"
pattern = """
                UIBox{
                    definition = {n=G.UIT.ROOT, config={align = 'cm', colour = G.C.CLEAR}, nodes={
                        {n=G.UIT.R, config={id = 'cash_out_button', align = \"cm\", padding = 0.1, minw = 7, r = 0.15, colour = G.C.ORANGE, shadow = true, hover = true, one_press = true, button = 'cash_out', focus_args = {snap_to = true}}, nodes={"""
position = "before"
payload = """
local payouts = {}
local separator = \"\"
if config.dollars ~= 0 then
\tpayouts[#payouts + 1] = {n=G.UIT.T, config={text = localize('$')..format_ui_value(config.dollars), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true}}
end
if config.plincoins ~= 0 then
\tif next(payouts) then separator = \", \" end
\tpayouts[#payouts + 1] = {n=G.UIT.T, config={text = separator .. localize('$')..format_ui_value(config.plincoins), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true, font = SMODS.Fonts.hpot_plincoin}}
end
if config.spark_points ~= 0 then
\tif next(payouts) then separator = \", \" end
\tpayouts[#payouts + 1] = {n=G.UIT.T, config={text = separator .. \"͸\"..format_ui_value(config.spark_points), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true, font = SMODS.Fonts.hpot_plincoin}}
end
if config.crypto ~= 0 then
\tif next(payouts) then separator = \", \" end
\tpayouts[#payouts + 1] = {n=G.UIT.T, config={text = separator .. \"£\"..format_ui_value(config.crypto), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true, font = SMODS.Fonts.hpot_plincoin}}
end
if config.credits ~= 0 then
\tif next(payouts) then separator = \", \" end
\tpayouts[#payouts + 1] = {n=G.UIT.T, config={text = separator .. "e"..format_ui_value(config.credits), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true, font = SMODS.Fonts.hpot_plincoin}}
end
if not next(payouts) then
\tpayouts[#payouts + 1] = {n=G.UIT.T, config={text = localize(\"hotpot_exposure\"), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true}}
end
if #payouts < 4 then
\ttable.insert(payouts, 1, {n=G.UIT.T, config={text = localize('b_cash_out')..\": \", scale = 1, colour = G.C.UI.TEXT_LIGHT, shadow = true}})
end"""
match_indent = true
overwrite = false
