[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Game:update
[[patches]]
[patches.pattern]
target = "game.lua"
position = "before"
pattern = "if self.STATE == self.STATES.PLAY_TAROT then"
payload = """
if self.STATE == self.STATES.PLINKO then
  update_plinko(dt)
end

"""
match_indent = true
overwrite = false

# Game:draw
[[patches]]
[patches.pattern]
target = "game.lua"
position = "after"
pattern = "timer_checkpoint('uiboxes', 'draw')"
payload = """
if self.STATE == self.STATES.PLINKO or PlinkoLogic and PlinkoLogic.STATE ~= PlinkoLogic.STATES.CLOSED then
  PlinkoGame.f.draw()
end

"""
match_indent = true
overwrite = false

# Game:draw
[[patches]]
[patches.pattern]
target = "cardarea.lua"
position = "after"
pattern = "(self.config.type == 'hand' and state == G.STATES.SMODS_BOOSTER_OPENED) or"
payload = "(self.config.type == 'hand' and G.STATE == G.STATES.PLINKO) or"
match_indent = true
overwrite = false

# ease_background_colour_blind
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
position = "before"
pattern = "elseif state == G.STATES.TAROT_PACK then"
payload = """
elseif state == G.STATES.PLINKO then
    ease_colour(G.C.DYN_UI.MAIN, mix_colours(G.C.MONEY, G.C.BLACK, 0.9))
"""
match_indent = true
overwrite = false

# TEMPORARY PATCH (probably not temporary)
# some fuckery happens when loading back into run while quit during plinko
# save_run
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
position = "at"
pattern = "STATE = G.STATE,"
payload = """
STATE = (G.STATE == G.STATES.PLINKO and G.STATES.SHOP) or (G.STATE == G.STATES.WHEEL and G.STATES.SHOP) or (G.STATE == G.STATES.NURSERY and G.STATES.SHOP) or G.STATE,
"""
match_indent = true
overwrite = false

# Remove plinko when closing the run and what not
[[patches]]
[patches.pattern]
target = "game.lua"
position = "after"
pattern = "if self.shop then self.shop:remove(); self.shop = nil end"
payload = """
if self.plinko then self.plinko:remove(); self.plinko = nil end
"""
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
position = "before"
pattern = "G.STATE = G.STATES.BLIND_SELECT"
payload = """
if G.plinko_rewards then
  G.plinko_rewards:remove()
  G.plinko_rewards = nil
end
if G.plinko then
  G.load_plinko_rewards = nil
  G.plinko:remove()
  G.plinko = nil
end
"""
match_indent = true
overwrite = false

# Add plincoins on cashout
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
position = "before"
pattern = "add_round_eval_row({name = 'bottom', dollars = dollars})"
payload = """
if G.GAME.plincoins_per_round and G.GAME.plincoins_per_round > 0 then
  -- Add Plincoins
  add_round_eval_plincoins({name='plincoins', pitch = pitch, plincoins = G.GAME.plincoins_per_round})
  plincoins = plincoins + 1
end

"""
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
position = "at"
pattern = "ease_dollars(G.GAME.current_round.dollars)"
payload = """
--
local d_m = 1
local p_m = 1
local c_m = 1
local s_m = 1
local budget_m = 1
if G.GAME.modifiers.unstable then
  d_m = pseudorandom(\"unstable_deck_dollars\") * 0.4 - 0.1675 + 1
  p_m = pseudorandom(\"unstable_deck_plincoins\") * 0.4 - 0.1675 + 1
  c_m = pseudorandom(\"unstable_deck_cryptocurrency\") * 0.4 - 0.1675 + 1
  s_m = pseudorandom(\"unstable_deck_spark_points\") * 0.4 - 0.1675 + 1
  budget_m = pseudorandom(\"unstable_deck_credits\") * 0.4 - 0.1675 + 1
end
ease_dollars(G.GAME.current_round.dollars * d_m)
ease_plincoins(G.GAME.current_round.plincoins * p_m)
if G.GAME.current_round.spark_points ~= 0 then ease_spark_points(G.GAME.current_round.spark_points * s_m) end
if G.GAME.current_round.cryptocurrency and G.GAME.current_round.cryptocurrency > 0 then ease_cryptocurrency(G.GAME.current_round.cryptocurrency * c_m) end
if G.GAME.current_round.budget and G.GAME.current_round.budget > 0 then
  HPTN.ease_budget(G.GAME.current_round.budget * budget_m) 
  G.GAME.current_round.budget = 0
end
G.GAME.current_round.plincoins = 0
G.GAME.current_round.spark_points = 0
G.GAME.current_round.cryptocurrency = 0
--
"""
match_indent = true
overwrite = false


# Add plinko button to shop
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
position = "at"
pattern = "{n=G.UIT.R,config={id = 'next_round_button', align = \"cm\", minw = 2.8, minh = 1.5, r=0.15,colour = G.C.RED, one_press = true, button = 'toggle_shop', hover = true,shadow = true}, nodes = {"
payload = "{n=G.UIT.R,config={id = 'next_round_button', align = \"cm\", minw = 2.8, minh = 1.03, r=0.15,colour = G.C.RED, one_press = true, button = 'toggle_shop', hover = true,shadow = true}, nodes = {"
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
position = "at"
pattern = "{n=G.UIT.R, config={align = \"cm\", minw = 2.8, minh = 1.6, r=0.15,colour = G.C.GREEN, button = 'reroll_shop', func = 'can_reroll', hover = true,shadow = true}, nodes = {"
payload = "{n=G.UIT.R, config={align = \"cm\", minw = 2.8, minh = 1.04, r=0.15,colour = G.C.GREEN, button = 'reroll_shop', func = 'can_reroll', hover = true,shadow = true}, nodes = {"
match_indent = true
overwrite = false


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
position = "before"
pattern = """
                      }},
                      {n=G.UIT.C, config={align = \"cm\", padding = 0.2, r=0.2, colour = G.C.L_BLACK, emboss = 0.05, minw = 8.2}, nodes={"""
payload = """
                      {n=G.UIT.R, config={align = \"cm\", minw = 1.4, minh = 1.03, r=0.15,colour =G.C.UI.TRANSPARENT_DARK, hover = false,shadow = false}, nodes = {

                        {n=G.UIT.C, config={align = \"cm\", minw = 0.5, maxw = 1, minh = 1.03, r=0.15,colour = G.C.MONEY, button = 'show_plinko', hover = true,shadow = true}, nodes = {
                          {n=G.UIT.R, config={align = \"cm\", padding = 0.07, func = 'set_button_pip'}, nodes={
                            {n=G.UIT.R, config={align = \"cm\", maxw = 1.3}, nodes={
                              -------------------
                              {n=G.UIT.T, config={text = localize(\"hotpot_plinko_to_plinko1\"), scale = 0.4, colour = G.C.WHITE, shadow = true}},
                              -------------------
                            }},
                            {n=G.UIT.R, config={align = \"cm\", maxw = 1.3, minw = 1}, nodes={
                              -------------------
                              {n=G.UIT.T, config={text = localize(\"hotpot_plinko_to_plinko2\"), scale = 0.7, colour = G.C.WHITE, shadow = true}},
                              -------------------
                            }}
                          }}
                        }},

                        {n=G.UIT.C, config={align = \"cm\", minw = 0.1, minh = 1.03, r=0.15,colour = G.C.UI.TRANSPARENT_DARK, hover = false,shadow = false}, nodes = { }},

                        {n=G.UIT.C, config={align = \"cm\", minw = 0.5, maxw = 0.7, minh = 1.03, r=0.15,colour = G.C.MONEY, button = 'show_wheel', hover = true,shadow = true}, nodes = {
                          {n=G.UIT.R, config={align = \"cm\", padding = 0.07, func = 'set_button_pip'}, nodes={
                            {n=G.UIT.R, config={align = \"cm\"}, nodes={
                              -------------------
                              {n=G.UIT.T, config={text = localize(\"wheel_button_1\"), scale = 0.6, colour = G.C.WHITE, shadow = true}},
                              -------------------
                            }},
                            {n=G.UIT.R, config={align = \"cm\"}, nodes={
                              -------------------
                              {n=G.UIT.T, config={text = localize(\"wheel_button_2\"), scale = 0.7, colour = G.C.WHITE, shadow = true}},
                              -------------------
                            }}
                          }}
                        }},

                        {n=G.UIT.C, config={align = \"cm\", minw = 0.1, minh = 1.03, r=0.15,colour = G.C.UI.TRANSPARENT_DARK, hover = false,shadow = false}, nodes = { }},

                        {n=G.UIT.C, config={align = \"cm\", minw = 0.5, maxw = 0.7, minh = 1.03, r=0.15,colour = G.GAME.breeding_finished and G.GAME.child_color or G.C.MONEY, button = 'show_nursery', hover = true,shadow = true}, nodes = {
                          {n=G.UIT.R, config={align = \"cm\", padding = 0.07, func = 'set_button_pip'}, nodes={
                            {n=G.UIT.R, config={align = \"cm\"}, nodes={
                              -------------------
                              {n=G.UIT.T, config={text = localize(\"nursery_button_1\"), scale = 0.6, colour = G.C.WHITE, shadow = true}},
                              -------------------
                            }},
                            {n=G.UIT.R, config={align = \"cm\"}, nodes={
                              -------------------
                              {n=G.UIT.T, config={text = localize(\"nursery_button_2\"), scale = 0.7, colour = G.C.WHITE, shadow = true}},
                              -------------------
                            }}
                          }}
                        }},
                    }},
              """
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.GAME.selected_back:apply_to_run()"
position = "before"
payload = """
if args.seed then self.GAME.seeded = true end
if self.GAME.seeded then self.GAME.budget = args.budget or 25 end
self.GAME.cryptocurrency = self.GAME.cryptocurrency or 0.5
self.GAME.pseudorandom[\"seed\"] = args[\"seed\"] or (not (G.SETTINGS.tutorial_complete or G.SETTINGS.tutorial_progress.completed_parts['big_blind']) and \"TUTORIAL\") or generate_starting_seed()"""
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.GAME.pseudorandom.seed = args.seed or (not (G.SETTINGS.tutorial_complete or G.SETTINGS.tutorial_progress.completed_parts['big_blind']) and \"TUTORIAL\") or generate_starting_seed()"
position = "at"
payload = ""
match_indent = false
overwrite = false