[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

# [[patches]]
# [patches.pattern]
# target = 'functions/UI_definitions.lua'
# pattern = '''
#     contents.dollars_chips = {n=G.UIT.R, config={align = "cm",r=0.1, padding = 0,colour = G.C.DYN_UI.BOSS_MAIN, emboss = 0.05, id = 'row_dollars_chips'}, nodes={
#       {n=G.UIT.C, config={align = "cm", padding = 0.1}, nodes={
#         {n=G.UIT.C, config={align = "cm", minw = 1.3}, nodes={
#           {n=G.UIT.R, config={align = "cm", padding = 0, maxw = 1.3}, nodes={
#             {n=G.UIT.T, config={text = localize('k_round'), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true}}
#           }},
#           {n=G.UIT.R, config={align = "cm", padding = 0, maxw = 1.3}, nodes={
#             {n=G.UIT.T, config={text =localize('k_lower_score'), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true}}
#           }}
#         }},
#         {n=G.UIT.C, config={align = "cm", minw = 3.3, minh = 0.7, r = 0.1, colour = G.C.DYN_UI.BOSS_DARK}, nodes={
#           {n=G.UIT.O, config={w=0.5,h=0.5 , object = stake_sprite, hover = true, can_collide = false}},
#           {n=G.UIT.B, config={w=0.1,h=0.1}},
#           {n=G.UIT.T, config={ref_table = G.GAME, ref_value = 'chips_text', lang = G.LANGUAGES['en-us'], scale = 0.85, colour = G.C.WHITE, id = 'chip_UI_count', func = 'chip_UI_set', shadow = true}}
#         }}
#       }}
#     }}
# '''
# position = "at"
# payload = '''
#     contents.dollars_chips = {n=G.UIT.R, config={align = "cm",r=0.1, padding = 0,colour = G.C.DYN_UI.BOSS_MAIN, emboss = 0.05, id = 'row_dollars_chips'}, nodes={
#       {n=G.UIT.C, config={align = "cm", padding = 0.1}, nodes={
        
#         -- Credits tab

#         {n=G.UIT.C, config={align = "cm", minw = 1.3}, nodes={
#           {n=G.UIT.R, config={align = "cm", padding = 0, maxw = 1.3}, nodes={
#             {n=G.UIT.T, config={text = localize('hpot_credit_text'), scale = 0.25, colour = G.C.PURPLE, shadow = true}}
#           }},
#           {n=G.UIT.R, config={minh = spacing},nodes={}},
#           {n=G.UIT.R, config={align = "cm", minh = 0.7}, nodes={
#             {n=G.UIT.C, config={align = "cm", r = 0.1, minw = 0.64*2+spacing, minh = 0.7, colour = temp_col2}, nodes={
#               {n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME, ref_value = 'budget_text', prefix = ''}}, maxw = 1.35, colours = {G.C.PURPLE}, font = G.LANGUAGES['en-us'].font, shadow = true,spacing = 2, bump = true, scale = 1.6*scale}), id = 'credits_UI_text'}}
#             }},
#           }},
#         }},

#         -- Chips tab

#         {n=G.UIT.C, config={align = "cm", minw = 1.3}, nodes={
#           {n=G.UIT.R, config={align = "cm", padding = 0, maxw = 1.3}, nodes={
#               {n=G.UIT.T, config={text = (localize('k_round') .. " " .. localize('k_lower_score')), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true}}
#           }},
#           {n=G.UIT.R, config={minh = spacing},nodes={}},
#           {n=G.UIT.R, config={align = "cm", minh = 0.7}, nodes={
#             {n=G.UIT.C, config={align = "cm", r = 0.1, minw = 3.3, minh = 0.7, colour = temp_col2}, nodes={
#               {n=G.UIT.O, config={w=0.5,h=0.5 , object = stake_sprite, hover = true, can_collide = false}},
#               {n=G.UIT.B, config={w=0.1,h=0.1}},
#               {n=G.UIT.T, config={ref_table = G.GAME, ref_value = 'chips_text', lang = G.LANGUAGES['en-us'], scale = 0.42, colour = G.C.WHITE, id = 'chip_UI_count', func = 'chip_UI_set', shadow = true}}
#             }},
#           }},
#         }},

#         -- ref
#         --[[
#         {n = G.UIT.C, config = {padding = 0, minw = 1.3}, nodes = {
#           {n = G.UIT.R, config = {align = "cm", padding = 0}, nodes = {
#             {n=G.UIT.C, config={align = "cm", padding = 0, maxw = 1.3}, nodes={
#               {n=G.UIT.T, config={text = (localize('k_round') .. " " .. localize('k_lower_score')), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true}}
#             }},
#           }},
#           {n=G.UIT.R, config={minh = spacing},nodes={}},
#           {n = G.UIT.R, config = {align = "cm"}, nodes = {
#             {n=G.UIT.C, config={align = "cm", minw = 3.3, minh = 0.7, r = 0.1, colour = G.C.DYN_UI.BOSS_DARK, padding = 0}, nodes={
#               {n=G.UIT.O, config={w=0.5,h=0.5 , object = stake_sprite, hover = true, can_collide = false}},
#               {n=G.UIT.B, config={w=0.1,h=0.1}},
#               {n=G.UIT.T, config={ref_table = G.GAME, ref_value = 'chips_text', lang = G.LANGUAGES['en-us'], scale = 0.42, colour = G.C.WHITE, id = 'chip_UI_count', func = 'chip_UI_set', shadow = true}}
#             }}
#           }}
#         }}
#         ]]
#       }}
#     }}
# '''
# match_indent = false

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
    {n=G.UIT.R, config={align = "cm", padding = 0.05}, nodes={
      {n=G.UIT.C, config={align = "cm", padding = 0.05, minw = 3.5*text_scale, maxw = 3.5*text_scale}, nodes={
        {n=G.UIT.T, config={text = localize('k_progress'), scale = 0.5, colour = G.C.UI.TEXT_LIGHT, shadow = true}},
      }},
      {n=G.UIT.C, config={align = "cl", minh = 0.6, r = 0.1, minw = 3.5*text_scale, colour = G.C.BLACK, emboss = 0.05,
      progress_bar = {
        max = _profile_progress.overall_of, ref_table = _profile_progress, ref_value = 'overall_tally', empty_col = G.C.BLACK, filled_col = adjust_alpha(bar_colour, 0.5)
      }}, nodes={
        {n=G.UIT.C, config={align = "cm", padding = 0.05, r = 0.1, minw = 3.5*text_scale}, nodes={
          {n=G.UIT.O, config={object = DynaText({string = {math.floor(0.01+100*_profile_progress.overall_tally/_profile_progress.overall_of)..'%'}, colours = {G.C.WHITE},shadow = true, float = true, scale = 0.55})}},
        }},
      }}
    }},
'''
position = "before"
payload = '''
  G.UIDEF.tname_credits(),
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
function G.UIDEF.profile_option(_profile)
'''
position = "after"
payload = '''
if HPTN then
  HPTN.Profile = _profile
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''
  elseif not e.config.object and G.run_setup_seed then
    e.config.object = UIBox{
      definition = {n=G.UIT.ROOT, config={align = "cm", colour = G.C.CLEAR}, nodes={
        {n=G.UIT.C, config={align = "cm", minw = 2.5, padding = 0.05}, nodes={
          simple_text_container('ml_disabled_seed',{colour = G.C.UI.TEXT_LIGHT, scale = 0.26, shadow = true}),
        }},
        {n=G.UIT.C, config={align = "cm", minw = 0.1}, nodes={
          create_text_input({max_length = 8, all_caps = true, ref_table = G, ref_value = 'setup_seed', prompt_text = localize('k_enter_seed')}),
          {n=G.UIT.C, config={align = "cm", minw = 0.1}, nodes={}},
          UIBox_button({label = localize('ml_paste_seed'),minw = 1, minh = 0.6, button = 'paste_seed', colour = G.C.BLUE, scale = 0.3, col = true})
'''
position = "after"
payload = '''
          ,{n=G.UIT.C, config={align = "cm", minw = 0.1}, nodes={}},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
  G.setup_seed = ''
'''
position = "after"
payload = '''
  G.setup_budget = ''
'''
match_indent = true

# i love copying code :smile:
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''if args.key == '0' then args.key = 'o' end'''
position = "at"
payload = '''if args.key == '0' and G.CONTROLLER.text_input_hook.config.ref_table and G.CONTROLLER.text_input_hook.config.ref_table.ref_value == "setup_seed" then args.key = 'o' end'''
match_indent = true
overwrite = false